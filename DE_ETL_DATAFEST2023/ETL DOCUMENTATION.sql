ETL DOCUMENTATION

The step taken to perform the ETL are documented below

STEP 1: Data Ingestion
The raw data was Loaded from all source tables (SensorDataRaw, WeatherDataRaw, SoilDataRaw, CropDataRaw, PestDataRaw, IrrigationDataRaw, LocationDataRaw) into staging tables (STG_CROPDATARAW, STG_IRRIGATIONDATARAW, STG_LOCATIONDATARAW, STG_PESTDATARAW, STG_SENSORDATARAW, STG_SOILDATARAW, STG_WEATHERDATARAW) within the Data Warehouse AVONMAET Schema.

The codes used to perform this step is documented below

-- staging table for CROPDATARAW
CREATE OR REPLACE TABLE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW AS
SELECT * 
FROM DFA23RAWDATA.RAWDATA.CROPDATARAW;


-- staging table for IRRIGATIONDATARAW
CREATE OR REPLACE TABLE DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW AS
SELECT * 
FROM DFA23RAWDATA.RAWDATA.IRRIGATIONDATARAW;


-- staging table for LOCATIONDATARAW
CREATE OR REPLACE TABLE DFA23RAWDATA.AVONMAET.STG_LOCATIONDATARAW AS
SELECT * 
FROM DFA23RAWDATA.RAWDATA.LOCATIONDATARAW;


-- staging table for PESTDATARAW
CREATE OR REPLACE TABLE DFA23RAWDATA.AVONMAET.STG_PESTDATARAW AS
SELECT * 
FROM DFA23RAWDATA.RAWDATA.PESTDATARAW;


-- staging table for SENSORDATARAW
CREATE OR REPLACE TABLE DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW AS
SELECT * 
FROM DFA23RAWDATA.RAWDATA.SENSORDATARAW;


-- staging table for SOILDATARAW
CREATE OR REPLACE TABLE DFA23RAWDATA.AVONMAET.STG_SOILDATARAW AS
SELECT * 
FROM DFA23RAWDATA.RAWDATA.SOILDATARAW;


-- staging table for WEATHERDATARAW
CREATE OR REPLACE TABLE DFA23RAWDATA.AVONMAET.STG_WEATHERDATARAW AS
SELECT * 
FROM DFA23RAWDATA.RAWDATA.WEATHERDATARAW;



STEP 2: DATA PREPROCESSING AND DATA CLEANING
The data in the staging table was inspected for issues with quality and structure. The anomalies found in the data and the cleaning action taken is listed below

FOR TABLE STG_CROPDATARAW

Anomalies discovered
- For Crop type column
1) Cron instead of Corn
2) Wheaat instead of Wheat
3) Presence of null values (0.0002% of the column)
4) Wrong data type

- For Growth stage
1) Flowerring instead of Flowering 
2) Vegatation instead of Vegetation
3) Presence of NA and Null values (10.02% of the column)
4) Wrong Data type

- For Pest Type
1) Aphidds instead of Aphids
2) Presence of null values and NA (10% of the column)
3) Wrong data type

- Crop Yield
1) Presence of NA and Null values (10.02%)
2) No non numeric values
3) Convert to SI units (Kgm-2)
4) Wrong DataType

- Timestamp
1) Wrong data type

The scripts used to fix the column can be found below
---- DATA TRANSFORMATION FOR CROPDATA

---- DATA TRANSFORMATION FOR CROPDATA

SELECT * FROM 
DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
--WHERE LENGTH(PEST_ISSUE) > 20
LIMIT 30;

--FOR CROP_TYPE COLUMN
---- to observe for issues in the column
SELECT CROP_TYPE
FROM DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
GROUP BY CROP_TYPE
ORDER BY CROP_TYPE;

--- fixing the issues
UPDATE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
SET Crop_Type = REPLACE(
    REPLACE(Crop_Type, 'Cron', 'Corn'),
    'Wheaat', 'Wheat'
)
WHERE Crop_Type IN ('Cron','Wheaat');

--- CHECKING FOR NULL VALUES 
SELECT SUM(CASE WHEN CROP_TYPE IS NULL THEN 1 END)/COUNT(*) AS PERCENT_NUL
FROM DFA23RAWDATA.AVONMAET.STG_CROPDATARAW;

----REPLACING WITH THE MODE
-- Calculate the mode CROP_TYPE
SELECT CROP_TYPE AS ModeValue
FROM DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
WHERE CROP_TYPE IS NOT NULL
GROUP BY CROP_TYPE
ORDER BY COUNT(*) DESC
LIMIT 1

---- UPDATE THE TABLE WITH THE MODE
UPDATE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
SET CROP_TYPE = (SELECT CROP_TYPE AS ModeValue
                FROM DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
                WHERE CROP_TYPE IS NOT NULL
                GROUP BY CROP_TYPE
                ORDER BY COUNT(*) DESC
                LIMIT 1
)
WHERE CROP_TYPE IS NULL;


----- GROWTH STAGE
SELECT GROWTH_STAGE
FROM DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
GROUP BY GROWTH_STAGE
ORDER BY GROWTH_STAGE;

------FIXING THE ISSUES
UPDATE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
SET GROWTH_STAGE = REPLACE(
    REPLACE(Crop_Type, 'Flowerring', 'Flowering'),
    'Vegatative', 'Vegetative'
)
WHERE GROWTH_STAGE IN ('Flowerring','Vegatative');


---- NUMBER OF NA AND NULL PERCENT 
SELECT SUM(CASE WHEN GROWTH_STAGE IS NULL OR GROWTH_STAGE = 'NA' THEN 1 END)
/COUNT(*) AS PERCENT_NUL
FROM DFA23RAWDATA.AVONMAET.STG_CROPDATARAW;


--- REPLACING WITH MODE
-- Calculate the mode GROWTH_STAGE
SELECT GROWTH_STAGE AS ModeValue
FROM DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
WHERE GROWTH_STAGE IS NOT NULL OR GROWTH_STAGE <> 'NA'
GROUP BY GROWTH_STAGE
ORDER BY COUNT(*) DESC
LIMIT 1

---- UPDATE THE TABLE WITH THE MODE
UPDATE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
SET GROWTH_STAGE = (SELECT GROWTH_STAGE AS ModeValue
                    FROM DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
                    WHERE GROWTH_STAGE IS NOT NULL OR GROWTH_STAGE <> 'NA'
                    GROUP BY GROWTH_STAGE
                    ORDER BY COUNT(*) DESC
                    LIMIT 1
)
WHERE GROWTH_STAGE IS NULL OR GROWTH_STAGE = 'NA';


---- to observe for issues in the PEST_ISSUE
SELECT PEST_ISSUE
FROM DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
GROUP BY PEST_ISSUE
ORDER BY PEST_ISSUE;


------FIXING THE ISSUES
UPDATE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
SET PEST_ISSUE = REPLACE(PEST_ISSUE, 'Aphidds', 'Aphids')
WHERE PEST_ISSUE IN ('Aphidds');



---- NUMBER OF NA AND NULL PERCENT 
SELECT SUM(CASE WHEN PEST_ISSUE IS NULL OR PEST_ISSUE = 'NA' THEN 1 END)
/COUNT(*) AS PERCENT_NUL
FROM DFA23RAWDATA.AVONMAET.STG_CROPDATARAW;


---- UPDATE THE TABLE WITH THE MODE
UPDATE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
SET PEST_ISSUE = 'Other'
WHERE PEST_ISSUE IS NULL OR PEST_ISSUE = 'NA';


-------- CROP_YIELD
---TO CHECK FOR NULL VALUES OR NA VALUES
SELECT SUM(CASE WHEN CROP_YIELD IS NULL OR CROP_YIELD = 'NA' THEN 1 END)
/COUNT(*) AS PERCENT_NUL
FROM DFA23RAWDATA.AVONMAET.STG_CROPDATARAW;

---- TO REPLACE THE NULL AND NA WITH THE MEAN VALUE
SELECT ROUND(AVG(CAST(CROP_YIELD AS DECIMAL(8,2))), 2) AS avg_yield
FROM DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
WHERE CROP_YIELD IS NOT NULL AND CROP_YIELD <> 'NA';

---- UPDATE THE TABLE WITH THE MEAN 
UPDATE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
SET CROP_YIELD = (SELECT ROUND(AVG(CAST(CROP_YIELD AS DECIMAL(8,2))), 2) AS avg_yield
                FROM DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
                WHERE CROP_YIELD IS NOT NULL AND CROP_YIELD <> 'NA'
)
WHERE CROP_YIELD IS NULL OR CROP_YIELD = 'NA';

-- Find rows with non-numeric characters (excluding the decimal point)
-- Find rows with non-numeric characters (excluding the decimal point)
SELECT CROP_YIELD
FROM DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
WHERE IS_REAL(TO_VARIANT(CAST(CROP_YIELD AS DECIMAL(8,2)))) = FALSE;


---- TO CHANGE THE UNIT OF CROP_YIELD FROM Bushels per Acre (bu/ac) TO Kg/m2
UPDATE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
SET CROP_YIELD = ROUND(CROP_YIELD * 0.0124274, 2); 
-- Conversion factor: 1 bushel/acre = 0.0124274 kg/mÂ²

-- Rename the column from CROP_YIELD to CROP_YIELD_KGM2
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
RENAME COLUMN CROP_YIELD TO CROP_YIELD_KGM2;



---- TO CHANGE THE DATATYPE OF THE DATA SET

--- FOR TIMESTAMP 
-- Convert Timestamp to datetime (m/d/yyyy hh:mm)
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
ADD COLUMN New_TIMESTAMP TIMESTAMP_NTZ;

-- Update the new column with converted values
UPDATE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
SET New_TIMESTAMP = TO_TIMESTAMP(TIMESTAMP, 'MM/DD/YYYY HH24:MI');

-- Drop the old VARCHAR(16777216) column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
DROP COLUMN TIMESTAMP;

-- Rename the new column to match the original column name
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
RENAME COLUMN New_TIMESTAMP TO TIMESTAMP;

--- FOR Crop_Type 
-- Add a new VARCHAR(20) column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
ADD COLUMN New_Crop_Type VARCHAR(20);

-- Copy data from the old column to the new column
UPDATE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
SET New_Crop_Type = LEFT(Crop_Type, 20); -- Adjust the truncation as needed

-- Drop the old VARCHAR(16777216) column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
DROP COLUMN Crop_Type;

-- Rename the new column to match the original column name
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
RENAME COLUMN New_Crop_Type TO Crop_Type;



--- FOR CROP_YIELD
--Add a new DECIMAL(8,2) column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
ADD COLUMN New_Crop_Yield DECIMAL(8, 2);

-- Copy data from the old column to the new column with conversion
UPDATE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
SET New_Crop_Yield = TRY_CAST(CROP_YIELD_KGM2 AS DECIMAL(8, 2)); -- Use TRY_CAST for safe conversion

-- Drop the old VARCHAR column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
DROP COLUMN CROP_YIELD_KGM2;

-- Rename the new column to match the original column name
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
RENAME COLUMN New_Crop_Yield TO CROP_YIELD_KGM2;


--- GROWTH STAGE 
-- Add a new VARCHAR(20) column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
ADD COLUMN New_Growth_Stage VARCHAR(20);

-- Copy data from the old column to the new column
UPDATE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
SET New_Growth_Stage = LEFT(Growth_Stage, 20); -- Adjust the truncation as needed

-- Drop the old VARCHAR(16777216) column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
DROP COLUMN Growth_Stage;

-- Rename the new column to match the original column name
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
RENAME COLUMN New_Growth_Stage TO Growth_Stage;



----PEST ISSUE
-- Add a new VARCHAR(20) column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
ADD COLUMN New_Pest_Issue VARCHAR(20);

-- Copy data from the old column to the new column
UPDATE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
SET New_Pest_Issue = LEFT(Pest_Issue, 20); -- Adjust the truncation as needed

-- Drop the old VARCHAR(16777216) column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
DROP COLUMN Pest_Issue;

-- Rename the new column to match the original column name
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
RENAME COLUMN New_Pest_Issue TO Pest_Issue;



FOR TABLE STG_PESTDATARAW

Anomlies detected
- For Pest_type
1) Aphiods instead of Aphids
2) Slogs instead of Slugs
3) Wrong Data Type 

- Pest Description
1) Poorly spelt words
2) Wrong Data Type

- Pest_Severity
1) Hihg instead of High
2) Replace NA with Null
3) Wrong Data Type

- Timestamp
1) Wrong Data Type


The scripts below are the solution to fixing the detected anomalies

---- DATA TRANSFORMATION FOR PESTDATARAW

SELECT * FROM 
 DFA23RAWDATA.AVONMAET.STG_PESTDATARAW
LIMIT 40;

-- FOR PEST_TYPE COLUMN
--- spotting for issues in the column
SELECT PEST_TYPE
FROM DFA23RAWDATA.AVONMAET.STG_PESTDATARAW
GROUP BY PEST_TYPE
ORDER BY PEST_TYPE;


------FIXING THE ISSUES
UPDATE DFA23RAWDATA.AVONMAET.STG_PESTDATARAW
SET PEST_TYPE = REPLACE(
    REPLACE(PEST_TYPE, 'Slogs', 'Slugs'),
    'Aphiods', 'Aphids'
)
WHERE PEST_TYPE IN ('Aphiods','Slogs');


-- FOR PEST_DESCRIPTION COLUMN
--- spotting for issues in the column
SELECT PEST_DESCRIPTION
FROM DFA23RAWDATA.AVONMAET.STG_PESTDATARAW
GROUP BY PEST_DESCRIPTION
ORDER BY PEST_DESCRIPTION;


---- fixing the issues
UPDATE DFA23RAWDATA.AVONMAET.STG_PESTDATARAW
SET PEST_DESCRIPTION = 
    CASE WHEN PEST_DESCRIPTION ILIKE '%riskkk.' THEN REPLACE(PEST_DESCRIPTION, 'riskkk', 'risk')
         WHEN PEST_DESCRIPTION ILIKE '%deteced.' THEN REPLACE(PEST_DESCRIPTION, 'deteced', 'detected')
         WHEN PEST_DESCRIPTION = 'NA' THEN NULL
         ELSE PEST_DESCRIPTION
         END 
WHERE PEST_DESCRIPTION IS NOT NULL;

UPDATE DFA23RAWDATA.AVONMAET.STG_PESTDATARAW
SET PEST_DESCRIPTION = 
    CASE WHEN PEST_DESCRIPTION ILIKE 'Aphiods%' THEN REPLACE(PEST_DESCRIPTION, 'Aphiods', 'Aphids')
         WHEN PEST_DESCRIPTION ILIKE 'Slogs%' THEN REPLACE(PEST_DESCRIPTION, 'Slogs', 'Slugs')
         ELSE PEST_DESCRIPTION
         END 
WHERE PEST_DESCRIPTION IS NOT NULL;



---FOR POST_SEVERITY COLUMN

---- INSPECTING
SELECT PEST_SEVERITY
FROM DFA23RAWDATA.AVONMAET.STG_PESTDATARAW
GROUP BY PEST_SEVERITY
ORDER BY PEST_SEVERITY;

--FIXING THE ISSUE
UPDATE DFA23RAWDATA.AVONMAET.STG_PESTDATARAW
SET PEST_SEVERITY = REPLACE(REPLACE(PEST_SEVERITY, 'Hihg', 'High'), 'NA', NULL)
WHERE PEST_SEVERITY IN ('Hihg', 'NA');



--- TO FIX THE DATATYPE OF THE TABLE 

--- FOR THE TIMESTAMP
-- Convert Timestamp to datetime (m/d/yyyy hh:mm)
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_PESTDATARAW
ADD COLUMN New_TIMESTAMP TIMESTAMP_NTZ;

-- Update the new column with converted values
UPDATE DFA23RAWDATA.AVONMAET.STG_PESTDATARAW
SET New_TIMESTAMP = TO_TIMESTAMP(TIMESTAMP, 'MM/DD/YYYY HH24:MI');

-- Drop the old VARCHAR(16777216) column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_PESTDATARAW
DROP COLUMN TIMESTAMP;

-- Rename the new column to match the original column name
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_PESTDATARAW
RENAME COLUMN New_TIMESTAMP TO TIMESTAMP;


--- FOR PEST_Type 
-- Add a new VARCHAR(20) column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_PESTDATARAW
ADD COLUMN New_PEST_Type VARCHAR(20);

-- Copy data from the old column to the new column
UPDATE DFA23RAWDATA.AVONMAET.STG_PESTDATARAW
SET New_PEST_Type = LEFT(PEST_Type, 20); -- Adjust the truncation as needed

-- Drop the old VARCHAR(16777216) column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_PESTDATARAW
DROP COLUMN PEST_Type;

-- Rename the new column to match the original column name
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_PESTDATARAW
RENAME COLUMN New_PEST_Type TO PEST_Type;



--- FOR PEST_SEVERITY
-- Add a new VARCHAR(20) column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_PESTDATARAW
ADD COLUMN New_PEST_SEVERITY VARCHAR(20);

-- Copy data from the old column to the new column
UPDATE DFA23RAWDATA.AVONMAET.STG_PESTDATARAW
SET New_PEST_SEVERITY = LEFT(PEST_SEVERITY, 20); -- Adjust the truncation as needed

-- Drop the old VARCHAR(16777216) column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_PESTDATARAW
DROP COLUMN PEST_SEVERITY;

-- Rename the new column to match the original column name
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_PESTDATARAW
RENAME COLUMN New_PEST_SEVERITY TO PEST_SEVERITY;


--- FOR PEST_DESCRIPTION
--Add a new TEXT column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_PESTDATARAW
ADD COLUMN pest_description_new TEXT;

-- Copy data and perform data type conversion
UPDATE DFA23RAWDATA.AVONMAET.STG_PESTDATARAW
SET pest_description_new = CAST(pest_description AS TEXT);

-- Drop the existing column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_PESTDATARAW
DROP COLUMN pest_description;

-- Rename the new column to match the original column name
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_PESTDATARAW
RENAME COLUMN pest_description_new TO pest_description;




FOR THE WEATHERDATARAW TABLE

Anomalies found in this table are 
- The weather condition
1) Poorly spelt words
2) Presence of NA
3) Wrong Data Type

- The Wind Speed
1) Presence of NA and Null
2) COnversion of Unit 
3) Wrong Data Type

- The Precipitation
1) Presence of NA and Null
2) COnversion of Unit
3) Wrong Data type 

- The Timestamp
1) Wrong Data Type 

The Script to fix this issues is documented below

---- DATA TRANSFORMATION FOR WEATHERDATARAW

SELECT * FROM 
 DFA23RAWDATA.AVONMAET.STG_WEATHERDATARAW
 --WHERE WEATHER_CONDITION IS NULL
LIMIT 100;

-- FOR WEATHER_CONDITION COLUMN
--- spotting for issues in the column
SELECT WEATHER_CONDITION
FROM DFA23RAWDATA.AVONMAET.STG_WEATHERDATARAW
GROUP BY WEATHER_CONDITION
ORDER BY WEATHER_CONDITION;


--FIXING THE ISSUE
UPDATE DFA23RAWDATA.AVONMAET.STG_WEATHERDATARAW
SET WEATHER_CONDITION = REPLACE(
         REPLACE(REPLACE(WEATHER_CONDITION, 'Claar', 'Clear'), 'Party Cloudy', 'Partly Cloudy'),
         'NA', NULL)
WHERE WEATHER_CONDITION IN ('Claar', 'Party Cloudy', 'NA');

--- CHECKING FOR NULL VALUES 
SELECT SUM(CASE WHEN WEATHER_CONDITION IS NULL THEN 1 END)/COUNT(*) AS PERCENT_NUL
FROM DFA23RAWDATA.AVONMAET.STG_WEATHERDATARAW;


---FOR WIND_SPEED
---TO CHECK FOR NULL VALUES OR NA VALUES
SELECT SUM(CASE WHEN WIND_SPEED IS NULL OR WIND_SPEED = 'NA' THEN 1 END)
/COUNT(*) AS PERCENT_NUL
FROM DFA23RAWDATA.AVONMAET.STG_WEATHERDATARAW;

---- TO REPLACE THE NULL AND NA WITH THE MEAN VALUE
SELECT ROUND(AVG(CAST(WIND_SPEED AS DECIMAL(8,2))), 2) AS avg_field
FROM DFA23RAWDATA.AVONMAET.STG_WEATHERDATARAW
WHERE WIND_SPEED IS NOT NULL AND WIND_SPEED <> 'NA';

---- UPDATE THE TABLE WITH THE MEAN 
UPDATE DFA23RAWDATA.AVONMAET.STG_WEATHERDATARAW
SET WIND_SPEED = (SELECT ROUND(AVG(CAST(WIND_SPEED AS DECIMAL(8,2))), 2) AS avg_field
            FROM DFA23RAWDATA.AVONMAET.STG_WEATHERDATARAW
            WHERE WIND_SPEED IS NOT NULL AND WIND_SPEED <> 'NA'
)
WHERE WIND_SPEED IS NULL OR WIND_SPEED = 'NA';

-- Find rows with non-numeric characters (excluding the decimal point)
-- Find rows with non-numeric characters (excluding the decimal point)
SELECT WIND_SPEED
FROM DFA23RAWDATA.AVONMAET.STG_WEATHERDATARAW
WHERE IS_REAL(TO_VARIANT(CAST(WIND_SPEED AS DECIMAL(8,2)))) = FALSE;


-----UNIT CONVERSION FROM MILES PER HOUR TO METRE PER SECOND
UPDATE DFA23RAWDATA.AVONMAET.STG_WEATHERDATARAW
SET WIND_SPEED = ROUND(WIND_SPEED * 0.44704, 2) -- ; -- Convert mph to m/s



---- FOR PRECIPITATION

---TO CHECK FOR NULL VALUES OR NA VALUES
SELECT SUM(CASE WHEN PRECIPITATION IS NULL OR PRECIPITATION = 'NA' THEN 1 END)
/COUNT(*) AS PERCENT_NUL
FROM DFA23RAWDATA.AVONMAET.STG_WEATHERDATARAW;


---- TO REPLACE THE NULL AND NA WITH THE MEAN VALUE
SELECT ROUND(AVG(CAST(PRECIPITATION AS DECIMAL(8,2))), 2) AS avg_field
FROM DFA23RAWDATA.AVONMAET.STG_WEATHERDATARAW
WHERE PRECIPITATION IS NOT NULL AND PRECIPITATION <> 'NA';


UPDATE DFA23RAWDATA.AVONMAET.STG_WEATHERDATARAW
SET PRECIPITATION = (SELECT ROUND(AVG(CAST(PRECIPITATION AS DECIMAL(8,2))), 2) AS avg_field
            FROM DFA23RAWDATA.AVONMAET.STG_WEATHERDATARAW
            WHERE PRECIPITATION IS NOT NULL AND PRECIPITATION <> 'NA'
)
WHERE PRECIPITATION IS NULL OR PRECIPITATION = 'NA';


---- converting from inches to metre
UPDATE DFA23RAWDATA.AVONMAET.STG_WEATHERDATARAW
SET PRECIPITATION = ROUND(PRECIPITATION * 0.0254, 2);


--- FIXING THE DATATYPE ISSUES

--- FOR THE TIMESTAMP
-- Convert Timestamp to datetime (m/d/yyyy hh:mm)
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_WEATHERDATARAW
ADD COLUMN New_TIMESTAMP TIMESTAMP_NTZ;

-- Update the new column with converted values
UPDATE DFA23RAWDATA.AVONMAET.STG_WEATHERDATARAW
SET New_TIMESTAMP = TO_TIMESTAMP(TIMESTAMP, 'MM/DD/YYYY HH24:MI');

-- Drop the old VARCHAR(16777216) column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_WEATHERDATARAW
DROP COLUMN TIMESTAMP;

-- Rename the new column to match the original column name
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_WEATHERDATARAW
RENAME COLUMN New_TIMESTAMP TO TIMESTAMP;

--- FOR WEATHER_CONDITION

-- Add a new VARCHAR(20) column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_WEATHERDATARAW
ADD COLUMN New_WEATHER_CONDITION VARCHAR(20);

-- Copy data from the old column to the new column
UPDATE DFA23RAWDATA.AVONMAET.STG_WEATHERDATARAW
SET New_WEATHER_CONDITION = LEFT(WEATHER_CONDITION, 20); -- Adjust the truncation as needed

-- Drop the old VARCHAR(16777216) column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_WEATHERDATARAW
DROP COLUMN WEATHER_CONDITION;

-- Rename the new column to match the original column name
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_WEATHERDATARAW
RENAME COLUMN New_WEATHER_CONDITION TO WEATHER_CONDITION;


--- FOR WIND_SPEED
--Add a new DECIMAL(5,2) column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_WEATHERDATARAW
ADD COLUMN New_WIND_SPEED DECIMAL(5, 2);

-- Copy data from the old column to the new column with conversion
UPDATE DFA23RAWDATA.AVONMAET.STG_WEATHERDATARAW
SET New_WIND_SPEED = TRY_CAST(WIND_SPEED AS DECIMAL(5, 2)); -- Use TRY_CAST for safe conversion

-- Drop the old VARCHAR column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_WEATHERDATARAW
DROP COLUMN WIND_SPEED;

-- Rename the new column to match the original column name
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_WEATHERDATARAW
RENAME COLUMN New_WIND_SPEED TO WIND_SPEED_MS;

--- FOR PRECIPITATION 
--Add a new DECIMAL(5,2) column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_WEATHERDATARAW
ADD COLUMN New_PRECIPITATION DECIMAL(5, 2);

-- Copy data from the old column to the new column with conversion
UPDATE DFA23RAWDATA.AVONMAET.STG_WEATHERDATARAW
SET New_PRECIPITATION = TRY_CAST(PRECIPITATION AS DECIMAL(5, 2)); -- Use TRY_CAST for safe conversion

-- Drop the old VARCHAR column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_WEATHERDATARAW
DROP COLUMN PRECIPITATION;

-- Rename the new column to match the original column name
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_WEATHERDATARAW
RENAME COLUMN New_PRECIPITATION TO PRECIPITATION_M;



FOR THE IRRIGATIONDATARAW TABLE
Anomalies detected

- For Sensor_id column
1) Extracting the sensor_id from the string 
2) Wrong DataType

- Irrigation Method
1) Wrongly Spelt words
2) Wrong Data Type

- Water Source
1) Wrongly Spelt words
2) Presence of Null Values
3) Wrong Data Type

- Irrigation Duration
1) Presence of NA 
2) Converting units to seconds
3) Wrong Data Type

- Timestamp
1) Wrong Data Type

The scripts used to fix the issues are seen below

---- DATA TRANSFORMATION FOR IRRIGATIONDATARAW

SELECT * FROM 
 DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
 --WHERE IRRIGATION_DURATION_MIN = 'NA'
LIMIT 100;

-- FOR SENSOR_ID COLUMN
--- spotting for issues in the column
SELECT
  SENSOR_ID AS OriginalValue,
  SPLIT_PART(SENSOR_ID, '_', 2) AS ExtractedValue
FROM
  DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
  LIMIT 100;


----EXTRACTING THE SENSOR_ID FROM THE COLUMN
UPDATE DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
SET SENSOR_ID = SPLIT_PART(SENSOR_ID, '_', 2);


--- CHECK FOR NULL VALUES
SELECT * FROM 
 DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
 WHERE SENSOR_ID IS NULL OR SENSOR_ID = 'NA'
LIMIT 100;


--- FOR IRRIGATION_METHOD 
--- spotting for issues in the column
SELECT IRRIGATION_METHOD
FROM DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
GROUP BY IRRIGATION_METHOD
ORDER BY IRRIGATION_METHOD;

-- FIXING THE ISSUES
UPDATE DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
SET IRRIGATION_METHOD = REPLACE(
    REPLACE(IRRIGATION_METHOD, 'Spinkler', 'Sprinkler'),
    'Driip', 'Drip'
)
WHERE IRRIGATION_METHOD IN ('Spinkler','Driip');


--- WATER_SOURCE
--- spotting for issues in the column
SELECT WATER_SOURCE
FROM DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
GROUP BY WATER_SOURCE
ORDER BY WATER_SOURCE;

-- FIXING THE ISSUES
UPDATE DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
SET WATER_SOURCE = REPLACE(
    REPLACE(WATER_SOURCE, 'Wel', 'Well'),
    'Rivver', 'River'
)
WHERE WATER_SOURCE IN ('Rivver','Wel');

--REPLACING NA with null
UPDATE DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
SET WATER_SOURCE = REPLACE(WATER_SOURCE, 'NA', NULL)
WHERE WATER_SOURCE IN ('NA');

--CALCULATE NULL PERCENT
SELECT SUM(CASE WHEN WATER_SOURCE IS NULL THEN 1 END)/COUNT(*) AS PERCENT_NUL
FROM DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW;



--FOR IRRIGATION_DURATION_MIN 
---TO CHECK FOR NULL VALUES OR NA VALUES
SELECT SUM(CASE WHEN IRRIGATION_DURATION_MIN IS NULL OR IRRIGATION_DURATION_MIN = 'NA' THEN 1 END)
/COUNT(*) AS PERCENT_NUL
FROM DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW;

---- TO REPLACE THE NULL AND NA WITH THE MEAN VALUE
SELECT ROUND(AVG(CAST(IRRIGATION_DURATION_MIN AS DECIMAL(8,2))), 0) AS avg_field
FROM DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
WHERE IRRIGATION_DURATION_MIN IS NOT NULL AND IRRIGATION_DURATION_MIN <> 'NA';

---- UPDATE THE TABLE WITH THE MEAN 
UPDATE DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
SET IRRIGATION_DURATION_MIN = (
  SELECT ROUND(AVG(CAST(IRRIGATION_DURATION_MIN AS DECIMAL(8,2))), 0) AS avg_field
  FROM DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
  WHERE IRRIGATION_DURATION_MIN IS NOT NULL AND IRRIGATION_DURATION_MIN <> 'NA'
)
WHERE IRRIGATION_DURATION_MIN IS NULL OR IRRIGATION_DURATION_MIN = 'NA';


-- TO CONVERT TO SECONDS
UPDATE DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
SET IRRIGATION_DURATION_MIN = ROUND(IRRIGATION_DURATION_MIN * 60, 0)


---- TO CLEAN THE DATA TYPE

-- FOR SENSOR_ID

-- Add a new VARCHAR(10) column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
ADD COLUMN New_SENSOR_ID VARCHAR(10);

-- Copy data from the old column to the new column
UPDATE DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
SET New_SENSOR_ID = LEFT(SENSOR_ID, 10); -- Adjust the truncation as needed

-- Drop the old VARCHAR(16777216) column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
DROP COLUMN SENSOR_ID;

-- Rename the new column to match the original column name
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
RENAME COLUMN New_SENSOR_ID TO SENSOR_ID;


--- FOR THE TIMESTAMP
-- Convert Timestamp to datetime (m/d/yyyy hh:mm)
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
ADD COLUMN New_TIMESTAMP TIMESTAMP_NTZ;

-- Update the new column with converted values
UPDATE DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
SET New_TIMESTAMP = TO_TIMESTAMP(TIMESTAMP, 'MM/DD/YYYY HH24:MI');

-- Drop the old VARCHAR(16777216) column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
DROP COLUMN TIMESTAMP;

-- Rename the new column to match the original column name
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
RENAME COLUMN New_TIMESTAMP TO TIMESTAMP;


--- FOR THE IRRIGATION_METHOD 
-- Add a new VARCHAR(10) column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
ADD COLUMN New_IRRIGATION_METHOD VARCHAR(20);

-- Copy data from the old column to the new column
UPDATE DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
SET New_IRRIGATION_METHOD = LEFT(IRRIGATION_METHOD, 20); -- Adjust the truncation as needed

-- Drop the old VARCHAR(16777216) column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
DROP COLUMN IRRIGATION_METHOD;

-- Rename the new column to match the original column name
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
RENAME COLUMN New_IRRIGATION_METHOD TO IRRIGATION_METHOD;

--- FOR WATER_SOURCE

-- Add a new VARCHAR(10) column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
ADD COLUMN New_WATER_SOURCE VARCHAR(20);

-- Copy data from the old column to the new column
UPDATE DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
SET New_WATER_SOURCE = LEFT(WATER_SOURCE, 20); -- Adjust the truncation as needed

-- Drop the old VARCHAR(16777216) column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
DROP COLUMN WATER_SOURCE;

-- Rename the new column to match the original column name
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
RENAME COLUMN New_WATER_SOURCE TO WATER_SOURCE;



----- IRRIGATION_DURATION_MIN
-- Add a new INTEGER column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
ADD COLUMN New_IRRIGATION_DURATION_MIN INTEGER;

-- Copy data from the old column to the new column
UPDATE DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
SET New_IRRIGATION_DURATION_MIN = TRY_CAST(IRRIGATION_DURATION_MIN AS INTEGER); -- Adjust the DATATYPE as needed

-- Drop the old column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
DROP COLUMN IRRIGATION_DURATION_MIN;

-- Rename the new column to match the original column name
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
RENAME COLUMN New_IRRIGATION_DURATION_MIN TO IRRIGATION_DURATION_SEC;



FOR SOILDATARAW TABLE
Anomalies spooted in the table are
- Presence of NA/Null Values in the columns 
- Wrong Data Types for all the columns

To fix the issues, the script used can be found below

---- DATA TRANSFORMATION FOR SOILDATARAW

SELECT * FROM 
 DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
LIMIT 100;


---- FOR SOIL_COMP
---TO CHECK FOR NULL VALUES OR NA VALUES
SELECT SUM(CASE WHEN SOIL_COMP IS NULL OR SOIL_COMP = 'NA' THEN 1 END)
/COUNT(*) AS PERCENT_NUL
FROM DFA23RAWDATA.AVONMAET.STG_SOILDATARAW;

---- TO REPLACE THE NULL AND NA WITH THE MEAN VALUE
SELECT ROUND(AVG(CAST(SOIL_COMP AS DECIMAL(8,2))), 2) AS avg_field
FROM DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
WHERE SOIL_COMP IS NOT NULL AND SOIL_COMP <> 'NA';

---- UPDATE THE TABLE WITH THE MEAN 
UPDATE DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
SET SOIL_COMP = (
  SELECT ROUND(AVG(CAST(SOIL_COMP AS DECIMAL(8,2))), 2) AS avg_field
FROM DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
WHERE SOIL_COMP IS NOT NULL AND SOIL_COMP <> 'NA'
)
WHERE SOIL_COMP IS NULL OR SOIL_COMP = 'NA';


--FOR SOIL_MOISTURE  
---TO CHECK FOR NULL VALUES OR NA VALUES
SELECT SUM(CASE WHEN SOIL_MOISTURE IS NULL OR SOIL_MOISTURE = 'NA' THEN 1 END)
/COUNT(*) AS PERCENT_NUL
FROM DFA23RAWDATA.AVONMAET.STG_SOILDATARAW;

---- TO REPLACE THE NULL AND NA WITH THE MEAN VALUE
SELECT ROUND(AVG(CAST(SOIL_MOISTURE AS DECIMAL(8,2))), 2) AS avg_field
FROM DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
WHERE SOIL_MOISTURE IS NOT NULL AND SOIL_MOISTURE <> 'NA';

---- UPDATE THE TABLE WITH THE MEAN 
UPDATE DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
SET SOIL_MOISTURE = (
  SELECT ROUND(AVG(CAST(SOIL_MOISTURE AS DECIMAL(8,2))), 2) AS avg_field
FROM DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
WHERE SOIL_MOISTURE IS NOT NULL AND SOIL_MOISTURE <> 'NA'
)
WHERE SOIL_MOISTURE IS NULL OR SOIL_MOISTURE = 'NA';


-- FOR SOIL_PH
---TO CHECK FOR NULL VALUES OR NA VALUES
SELECT SUM(CASE WHEN SOIL_PH IS NULL OR SOIL_PH = 'NA' THEN 1 END)
/COUNT(*) AS PERCENT_NUL
FROM DFA23RAWDATA.AVONMAET.STG_SOILDATARAW;

---- TO REPLACE THE NULL AND NA WITH THE MEAN VALUE
SELECT ROUND(AVG(CAST(SOIL_PH AS DECIMAL(8,2))), 2) AS avg_field
FROM DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
WHERE SOIL_PH IS NOT NULL AND SOIL_PH <> 'NA';

---- UPDATE THE TABLE WITH THE MEAN 
UPDATE DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
SET SOIL_PH = (
  SELECT ROUND(AVG(CAST(SOIL_PH AS DECIMAL(8,2))), 2) AS avg_field
FROM DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
WHERE SOIL_PH IS NOT NULL AND SOIL_PH <> 'NA'
)
WHERE SOIL_PH IS NULL OR SOIL_PH = 'NA';


--- FOR NITROGEN_LEVEL
---TO CHECK FOR NULL VALUES OR NA VALUES
SELECT SUM(CASE WHEN NITROGEN_LEVEL IS NULL OR NITROGEN_LEVEL = 'NA' THEN 1 END)
/COUNT(*) AS PERCENT_NUL
FROM DFA23RAWDATA.AVONMAET.STG_SOILDATARAW;

---- TO REPLACE THE NULL AND NA WITH THE MEAN VALUE
SELECT ROUND(AVG(CAST(NITROGEN_LEVEL AS DECIMAL(8,2))), 2) AS avg_field
FROM DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
WHERE NITROGEN_LEVEL IS NOT NULL AND NITROGEN_LEVEL <> 'NA';

---- UPDATE THE TABLE WITH THE MEAN 
UPDATE DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
SET NITROGEN_LEVEL = (
  SELECT ROUND(AVG(CAST(NITROGEN_LEVEL AS DECIMAL(8,2))), 2) AS avg_field
FROM DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
WHERE NITROGEN_LEVEL IS NOT NULL AND NITROGEN_LEVEL <> 'NA'
)
WHERE NITROGEN_LEVEL IS NULL OR NITROGEN_LEVEL = 'NA';



-- FOR PHOSPHORUS_LEVEL
---TO CHECK FOR NULL VALUES OR NA VALUES
SELECT SUM(CASE WHEN PHOSPHORUS_LEVEL IS NULL OR PHOSPHORUS_LEVEL = 'NA' THEN 1 END)
/COUNT(*) AS PERCENT_NUL
FROM DFA23RAWDATA.AVONMAET.STG_SOILDATARAW;

---- TO REPLACE THE NULL AND NA WITH THE MEAN VALUE
SELECT ROUND(AVG(CAST(PHOSPHORUS_LEVEL AS DECIMAL(8,2))), 2) AS avg_field
FROM DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
WHERE PHOSPHORUS_LEVEL IS NOT NULL AND PHOSPHORUS_LEVEL <> 'NA';

---- UPDATE THE TABLE WITH THE MEAN 
UPDATE DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
SET PHOSPHORUS_LEVEL = (
  SELECT ROUND(AVG(CAST(PHOSPHORUS_LEVEL AS DECIMAL(8,2))), 2) AS avg_field
FROM DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
WHERE PHOSPHORUS_LEVEL IS NOT NULL AND PHOSPHORUS_LEVEL <> 'NA'
)
WHERE PHOSPHORUS_LEVEL IS NULL OR PHOSPHORUS_LEVEL = 'NA';


---- FOR ORGANIC_MATTER 
---TO CHECK FOR NULL VALUES OR NA VALUES
SELECT SUM(CASE WHEN ORGANIC_MATTER IS NULL OR ORGANIC_MATTER = 'NA' THEN 1 END)
/COUNT(*) AS PERCENT_NUL
FROM DFA23RAWDATA.AVONMAET.STG_SOILDATARAW;

---- TO REPLACE THE NULL AND NA WITH THE MEAN VALUE
SELECT ROUND(AVG(CAST(ORGANIC_MATTER AS DECIMAL(8,2))), 2) AS avg_field
FROM DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
WHERE ORGANIC_MATTER IS NOT NULL AND ORGANIC_MATTER <> 'NA';

---- UPDATE THE TABLE WITH THE MEAN 
UPDATE DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
SET ORGANIC_MATTER = (
  SELECT ROUND(AVG(CAST(ORGANIC_MATTER AS DECIMAL(8,2))), 2) AS avg_field
FROM DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
WHERE ORGANIC_MATTER IS NOT NULL AND ORGANIC_MATTER <> 'NA'
)
WHERE ORGANIC_MATTER IS NULL OR ORGANIC_MATTER = 'NA';


---- FIXING ISSUES WITH DATATYPE

--- FOR THE TIMESTAMP
-- Convert Timestamp to datetime (m/d/yyyy hh:mm)
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
ADD COLUMN New_TIMESTAMP TIMESTAMP_NTZ;

-- Update the new column with converted values
UPDATE DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
SET New_TIMESTAMP = TO_TIMESTAMP(TIMESTAMP, 'MM/DD/YYYY HH24:MI');

-- Drop the old  column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
DROP COLUMN TIMESTAMP;

-- Rename the new column to match the original column name
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
RENAME COLUMN New_TIMESTAMP TO TIMESTAMP;


--- FOR SOIL_COMP
--Add a new DECIMAL(5,2) column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
ADD COLUMN New_SOIL_COMP DECIMAL(5, 2);

-- Copy data from the old column to the new column with conversion
UPDATE DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
SET New_SOIL_COMP = TRY_CAST(SOIL_COMP AS DECIMAL(5, 2)); -- Use TRY_CAST for safe conversion

-- Drop the old column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
DROP COLUMN SOIL_COMP;

-- Rename the new column to match the original column name
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
RENAME COLUMN New_SOIL_COMP TO SOIL_COMP;


-- FOR SOIL_MOISTURE
--Add a new DECIMAL(5,2) column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
ADD COLUMN New_SOIL_MOISTURE DECIMAL(5, 2);

-- Copy data from the old column to the new column with conversion
UPDATE DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
SET New_SOIL_MOISTURE = TRY_CAST(SOIL_MOISTURE AS DECIMAL(5, 2)); -- Use TRY_CAST for safe conversion

-- Drop the old column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
DROP COLUMN SOIL_MOISTURE;

-- Rename the new column to match the original column name
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
RENAME COLUMN New_SOIL_MOISTURE TO SOIL_MOISTURE;


-- FOR SOIL_PH

--Add a new DECIMAL(4,2) column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
ADD COLUMN New_SOIL_PH DECIMAL(4, 2);

-- Copy data from the old column to the new column with conversion
UPDATE DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
SET New_SOIL_PH = TRY_CAST(SOIL_PH AS DECIMAL(4, 2)); -- Use TRY_CAST for safe conversion

-- Drop the old column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
DROP COLUMN SOIL_PH;

-- Rename the new column to match the original column name
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
RENAME COLUMN New_SOIL_PH TO SOIL_PH;


--- NITROGEN_LEVEL
--Add a new DECIMAL(5,2) column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
ADD COLUMN New_NITROGEN_LEVEL DECIMAL(5, 2);

-- Copy data from the old column to the new column with conversion
UPDATE DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
SET New_NITROGEN_LEVEL = TRY_CAST(NITROGEN_LEVEL AS DECIMAL(5, 2)); -- Use TRY_CAST for safe conversion

-- Drop the old column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
DROP COLUMN NITROGEN_LEVEL;

-- Rename the new column to match the original column name
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
RENAME COLUMN New_NITROGEN_LEVEL TO NITROGEN_LEVEL;


---- PHOSPHORUS_LEVEL
--Add a new DECIMAL(5,2) column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
ADD COLUMN New_PHOSPHORUS_LEVEL DECIMAL(5, 2);

-- Copy data from the old column to the new column with conversion
UPDATE DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
SET New_PHOSPHORUS_LEVEL = TRY_CAST(PHOSPHORUS_LEVEL AS DECIMAL(5, 2)); -- Use TRY_CAST for safe conversion

-- Drop the old column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
DROP COLUMN PHOSPHORUS_LEVEL;

-- Rename the new column to match the original column name
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
RENAME COLUMN New_PHOSPHORUS_LEVEL TO PHOSPHORUS_LEVEL;


---- ORGANIC_MATTER 
--Add a new DECIMAL(5,2) column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
ADD COLUMN New_ORGANIC_MATTER DECIMAL(5, 2);

-- Copy data from the old column to the new column with conversion
UPDATE DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
SET New_ORGANIC_MATTER = TRY_CAST(ORGANIC_MATTER AS DECIMAL(5, 2)); -- Use TRY_CAST for safe conversion

-- Drop the old column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
DROP COLUMN ORGANIC_MATTER;

-- Rename the new column to match the original column name
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
RENAME COLUMN New_ORGANIC_MATTER TO ORGANIC_MATTER;





FOR SENSORDATARAW TABLE
Anomalies observed in the table are
1) Presence of string in the Timestamp and Sensor ID Column
2) Presence of NA/NULL Values
3) Wrong Datatype for columns


The Approach to fixing the anomalies are documented below

---- DATA TRANSFORMATION FOR SENSORDATARAW

SELECT * FROM 
 DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
LIMIT 100;


-- FOR SENSOR_ID 
--- spotting for issues in the column
SELECT
  SENSOR_ID AS OriginalValue,
  SPLIT_PART(SENSOR_ID, '"', 2) AS ExtractedValue
FROM
 DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
  LIMIT 100;

----EXTRACTING THE SENSOR_ID FROM THE COLUMN
UPDATE DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
SET SENSOR_ID = SPLIT_PART(SENSOR_ID, '"', 2);



---- FOR TIMESTAMP 
--- spotting for issues in the column
SELECT
  TIMESTAMP AS OriginalValue,
  SPLIT_PART(TIMESTAMP, '"', 2) AS ExtractedValue
FROM
 DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
  LIMIT 100;

----EXTRACTING THE TIMESTAMP FROM THE COLUMN
UPDATE DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
SET TIMESTAMP = SPLIT_PART(TIMESTAMP, '"', 2);


---- FOR TEMPERATURE 
---TO CHECK FOR NULL VALUES OR NA VALUES
SELECT SUM(CASE WHEN TEMPERATURE IS NULL OR TEMPERATURE = 'NA' THEN 1 END)
/COUNT(*) AS PERCENT_NUL
FROM DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW;

---- TO REPLACE THE NULL AND NA WITH THE MEAN VALUE
SELECT ROUND(AVG(CAST(TEMPERATURE AS DECIMAL(8,2))), 2) AS avg_field
FROM DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
WHERE TEMPERATURE IS NOT NULL AND TEMPERATURE <> 'NA';

---- UPDATE THE TABLE WITH THE MEAN 
UPDATE DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
SET TEMPERATURE = (
  SELECT ROUND(AVG(CAST(TEMPERATURE AS DECIMAL(8,2))), 2) AS avg_field
FROM DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
WHERE TEMPERATURE IS NOT NULL AND TEMPERATURE <> 'NA'
)
WHERE TEMPERATURE IS NULL OR TEMPERATURE = 'NA';

--- to convert the temperature to celcius
UPDATE DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
SET TEMPERATURE = ROUND((TEMPERATURE - 32) / 1.8, 2);



--- FOR HUMIDITY 
---TO CHECK FOR NULL VALUES OR NA VALUES
SELECT SUM(CASE WHEN HUMIDITY IS NULL OR HUMIDITY = 'NA' THEN 1 END)
/COUNT(*) AS PERCENT_NUL
FROM DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW;

---- TO REPLACE THE NULL AND NA WITH THE MEAN VALUE
SELECT ROUND(AVG(CAST(HUMIDITY AS DECIMAL(8,2))), 1) AS avg_field
FROM DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
WHERE HUMIDITY IS NOT NULL AND HUMIDITY <> 'NA';

---- UPDATE THE TABLE WITH THE MEAN 
UPDATE DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
SET HUMIDITY = (
  SELECT ROUND(AVG(CAST(HUMIDITY AS DECIMAL(8,2))), 1) AS avg_field
FROM DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
WHERE HUMIDITY IS NOT NULL AND HUMIDITY <> 'NA'
)
WHERE HUMIDITY IS NULL OR HUMIDITY = 'NA';


--- FOR SOIL_MOISTURE 
---TO CHECK FOR NULL VALUES OR NA VALUES
SELECT SUM(CASE WHEN SOIL_MOISTURE IS NULL OR SOIL_MOISTURE = 'NA' THEN 1 END)
/COUNT(*) AS PERCENT_NUL
FROM DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW;

---- TO REPLACE THE NULL AND NA WITH THE MEAN VALUE
SELECT ROUND(AVG(CAST(SOIL_MOISTURE AS DECIMAL(8,2))), 1) AS avg_field
FROM DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
WHERE SOIL_MOISTURE IS NOT NULL AND SOIL_MOISTURE <> 'NA';

---- UPDATE THE TABLE WITH THE MEAN 
UPDATE DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
SET SOIL_MOISTURE = (
  SELECT ROUND(AVG(CAST(SOIL_MOISTURE AS DECIMAL(8,2))), 1) AS avg_field
FROM DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
WHERE SOIL_MOISTURE IS NOT NULL AND SOIL_MOISTURE <> 'NA'
)
WHERE SOIL_MOISTURE IS NULL OR SOIL_MOISTURE = 'NA';


---- LIGHT_INTENSITY
---TO CHECK FOR NULL VALUES OR NA VALUES
SELECT SUM(CASE WHEN LIGHT_INTENSITY IS NULL OR LIGHT_INTENSITY = 'NA' THEN 1 END)
/COUNT(*) AS PERCENT_NUL
FROM DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW;

---- TO REPLACE THE NULL AND NA WITH THE MEAN VALUE
SELECT ROUND(AVG(CAST(LIGHT_INTENSITY AS DECIMAL(8,2))), 0) AS avg_field
FROM DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
WHERE LIGHT_INTENSITY IS NOT NULL AND LIGHT_INTENSITY <> 'NA';

---- UPDATE THE TABLE WITH THE MEAN 
UPDATE DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
SET LIGHT_INTENSITY = (
  SELECT ROUND(AVG(CAST(LIGHT_INTENSITY AS DECIMAL(8,2))), 0) AS avg_field
FROM DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
WHERE LIGHT_INTENSITY IS NOT NULL AND LIGHT_INTENSITY <> 'NA'
)
WHERE LIGHT_INTENSITY IS NULL OR LIGHT_INTENSITY = 'NA';


---- FIXING THE DATATYPE ISSUE 

---- FOR SENSOR_ID
-- Add a new VARCHAR(10) column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
ADD COLUMN New_SENSOR_ID VARCHAR(10);

-- Copy data from the old column to the new column
UPDATE DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
SET New_SENSOR_ID = LEFT(SENSOR_ID, 10); -- Adjust the truncation as needed

-- Drop the old VARCHAR(16777216) column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
DROP COLUMN SENSOR_ID;

-- Rename the new column to match the original column name
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
RENAME COLUMN New_SENSOR_ID TO SENSOR_ID;


--- FOR THE TIMESTAMP
-- Convert Timestamp to datetime (m/d/yyyy hh:mm)
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
ADD COLUMN New_TIMESTAMP TIMESTAMP_NTZ;

-- Update the new column with converted values
UPDATE DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
SET New_TIMESTAMP = TO_TIMESTAMP(TIMESTAMP, 'YYYY-MM-DD HH24:MI:SS');

-- Drop the old VARCHAR(16777216) column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
DROP COLUMN TIMESTAMP;

-- Rename the new column to match the original column name
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
RENAME COLUMN New_TIMESTAMP TO TIMESTAMP;


--- TEMPERATURE
--Add a new DECIMAL(5,2) column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
ADD COLUMN New_TEMPERATURE DECIMAL(5, 2);

-- Copy data from the old column to the new column with conversion
UPDATE DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
SET New_TEMPERATURE = TRY_CAST(TEMPERATURE AS DECIMAL(5, 2)); -- Use TRY_CAST for safe conversion

-- Drop the old column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
DROP COLUMN TEMPERATURE;

-- Rename the new column to match the original column name
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
RENAME COLUMN New_TEMPERATURE TO TEMPERATURE;


-- FOR HUMIDITY 
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
ADD COLUMN New_HUMIDITY DECIMAL(5, 2);

-- Copy data from the old column to the new column with conversion
UPDATE DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
SET New_HUMIDITY = TRY_CAST(HUMIDITY AS DECIMAL(5, 2)); -- Use TRY_CAST for safe conversion

-- Drop the old column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
DROP COLUMN HUMIDITY;

-- Rename the new column to match the original column name
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
RENAME COLUMN New_HUMIDITY TO HUMIDITY;


--- FOR SOIL_MOISTURE
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
ADD COLUMN New_SOIL_MOISTURE DECIMAL(5, 2);

-- Copy data from the old column to the new column with conversion
UPDATE DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
SET New_SOIL_MOISTURE = TRY_CAST(SOIL_MOISTURE AS DECIMAL(5, 2)); -- Use TRY_CAST for safe conversion

-- Drop the old column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
DROP COLUMN SOIL_MOISTURE;

-- Rename the new column to match the original column name
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
RENAME COLUMN New_SOIL_MOISTURE TO SOIL_MOISTURE;



---- LIGHT_INTENSITY
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
ADD COLUMN New_LIGHT_INTENSITY INTEGER;

-- Copy data from the old column to the new column with conversion
UPDATE DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
SET New_LIGHT_INTENSITY = TRY_CAST(LIGHT_INTENSITY AS INTEGER); -- Use TRY_CAST for safe conversion

-- Drop the old column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
DROP COLUMN LIGHT_INTENSITY;

-- Rename the new column to match the original column name
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
RENAME COLUMN New_LIGHT_INTENSITY TO LIGHT_INTENSITY;


-------BATTERY_LEVEL
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
ADD COLUMN New_BATTERY_LEVEL DECIMAL(5, 2);

-- Copy data from the old column to the new column with conversion
UPDATE DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
SET New_BATTERY_LEVEL = TRY_CAST(BATTERY_LEVEL AS DECIMAL(5, 2)); -- Use TRY_CAST for safe conversion

-- Drop the old column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
DROP COLUMN BATTERY_LEVEL;

-- Rename the new column to match the original column name
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
RENAME COLUMN New_BATTERY_LEVEL TO BATTERY_LEVEL;



FOR LOCATIONDATARAW TABLE
Anomaly found in this table are 
1) Invalid characters from sensor ID
2) Wrong Data Type for the columns

The scripts below are used to handle the quality issues in the column
---- DATA TRANSFORMATION FOR LOCATIONDATARAW

SELECT * FROM 
 DFA23RAWDATA.AVONMAET.STG_LOCATIONDATARAW
LIMIT 100;


-- FOR SENSOR_ID 
--- spotting for issues in the column
SELECT
  SENSOR_ID AS OriginalValue,
  SPLIT_PART(SENSOR_ID, '_', 2) AS ExtractedValue
FROM
  DFA23RAWDATA.AVONMAET.STG_LOCATIONDATARAW
  LIMIT 100;

----EXTRACTING THE SENSOR_ID FROM THE COLUMN
UPDATE DFA23RAWDATA.AVONMAET.STG_LOCATIONDATARAW
SET SENSOR_ID = SPLIT_PART(SENSOR_ID, '_', 2);


--- FIXING THE DATATYPE

---- FOR SENSOR_ID
-- Add a new VARCHAR(10) column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_LOCATIONDATARAW
ADD COLUMN New_SENSOR_ID VARCHAR(10);

-- Copy data from the old column to the new column
UPDATE DFA23RAWDATA.AVONMAET.STG_LOCATIONDATARAW
SET New_SENSOR_ID = LEFT(SENSOR_ID, 10); -- Adjust the truncation as needed

-- Drop the old VARCHAR(16777216) column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_LOCATIONDATARAW
DROP COLUMN SENSOR_ID;

-- Rename the new column to match the original column name
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_LOCATIONDATARAW
RENAME COLUMN New_SENSOR_ID TO SENSOR_ID;


-----FOR LOCATION_NAME
-- Add a new VARCHAR(30) column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_LOCATIONDATARAW
ADD COLUMN New_LOCATION_NAME VARCHAR(30);

-- Copy data from the old column to the new column
UPDATE DFA23RAWDATA.AVONMAET.STG_LOCATIONDATARAW
SET New_LOCATION_NAME = LEFT(LOCATION_NAME, 30); -- Adjust the truncation as needed

-- Drop the old VARCHAR(16777216) column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_LOCATIONDATARAW
DROP COLUMN LOCATION_NAME;

-- Rename the new column to match the original column name
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_LOCATIONDATARAW
RENAME COLUMN New_LOCATION_NAME TO LOCATION_NAME;



---- FOR LATITUDE
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_LOCATIONDATARAW
ADD COLUMN New_LATITUDE DECIMAL(8, 6);

-- Copy data from the old column to the new column with conversion
UPDATE DFA23RAWDATA.AVONMAET.STG_LOCATIONDATARAW
SET New_LATITUDE = TRY_CAST(LATITUDE AS DECIMAL(8, 6)); -- Use TRY_CAST for safe conversion

-- Drop the old column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_LOCATIONDATARAW
DROP COLUMN LATITUDE;

-- Rename the new column to match the original column name
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_LOCATIONDATARAW
RENAME COLUMN New_LATITUDE TO LATITUDE;


---- FOR LONGITUDE 
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_LOCATIONDATARAW
ADD COLUMN New_LONGITUDE DECIMAL(9, 6);

-- Copy data from the old column to the new column with conversion
UPDATE DFA23RAWDATA.AVONMAET.STG_LOCATIONDATARAW
SET New_LONGITUDE = TRY_CAST(LONGITUDE AS DECIMAL(9, 6)); -- Use TRY_CAST for safe conversion

-- Drop the old column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_LOCATIONDATARAW
DROP COLUMN LONGITUDE;

-- Rename the new column to match the original column name
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_LOCATIONDATARAW
RENAME COLUMN New_LONGITUDE TO LONGITUDE;

---- FOR ELEVATION 
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_LOCATIONDATARAW
ADD COLUMN New_ELEVATION DECIMAL(8, 2);

-- Copy data from the old column to the new column with conversion
UPDATE DFA23RAWDATA.AVONMAET.STG_LOCATIONDATARAW
SET New_ELEVATION = TRY_CAST(ELEVATION AS DECIMAL(8, 2)); -- Use TRY_CAST for safe conversion

-- Drop the old column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_LOCATIONDATARAW
DROP COLUMN ELEVATION;

-- Rename the new column to match the original column name
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_LOCATIONDATARAW
RENAME COLUMN New_ELEVATION TO ELEVATION;



-----FOR REGION 
-- Add a new VARCHAR(20) column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_LOCATIONDATARAW
ADD COLUMN New_REGION VARCHAR(20);

-- Copy data from the old column to the new column
UPDATE DFA23RAWDATA.AVONMAET.STG_LOCATIONDATARAW
SET New_REGION = LEFT(REGION, 20); -- Adjust the truncation as needed

-- Drop the old VARCHAR(16777216) column
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_LOCATIONDATARAW
DROP COLUMN REGION;

-- Rename the new column to match the original column name
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_LOCATIONDATARAW
RENAME COLUMN New_REGION TO REGION;




---- CREATION OF DIMENSION TABLES

-- CREATING DIMENSIONS TABLE

---FOR CROP TYPE (CROPDATA)
CREATE OR REPLACE TABLE DFA23RAWDATA.AVONMAET.DIM_CROP_TYPE AS
SELECT 
    'C' || ROW_NUMBER() OVER(ORDER BY CROP_TYPE) AS CROP_ID,
    CROP_TYPE
FROM
    (SELECT CROP_TYPE FROM DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
    GROUP BY CROP_TYPE);

--- TO CHECK IF THE TABLE WAS CREATED
SELECT * FROM DFA23RAWDATA.AVONMAET.DIM_CROP_TYPE

--- TO REPLACE THE CROP TYPE COLUMN FROM CROPDATA TABLE AND REPLACE WITH CROP_ID
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
ADD COLUMN CROP_ID VARCHAR(10);

UPDATE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW AS T2
SET T2.CROP_ID = T1.CROP_ID
FROM DFA23RAWDATA.AVONMAET.DIM_CROP_TYPE AS T1
WHERE T2.CROP_TYPE = T1.CROP_TYPE;

ALTER TABLE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
DROP COLUMN CROP_TYPE;


--- TO ALTER THE DATATYPE OF CROP_ID
ALTER TABLE DFA23RAWDATA.AVONMAET.DIM_CROP_TYPE
ADD COLUMN New_CROP_ID VARCHAR(10);

-- Copy data from the old column to the new column
UPDATE DFA23RAWDATA.AVONMAET.DIM_CROP_TYPE
SET New_CROP_ID = LEFT(CROP_ID, 20); -- Adjust the truncation as needed

-- Drop the old VARCHAR(16777216) column
ALTER TABLE DFA23RAWDATA.AVONMAET.DIM_CROP_TYPE
DROP COLUMN CROP_ID;

-- Rename the new column to match the original column name
ALTER TABLE DFA23RAWDATA.AVONMAET.DIM_CROP_TYPE
RENAME COLUMN New_CROP_ID TO CROP_ID;

--- TO ASSIGN PRIMARY KEY AND FOREIGN KEY
ALTER TABLE DFA23RAWDATA.AVONMAET.DIM_CROP_TYPE
ADD CONSTRAINT PK_CROP_ID PRIMARY KEY (CROP_ID);

ALTER TABLE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
ADD CONSTRAINT FK_CROPID
FOREIGN KEY (CROP_ID)
REFERENCES DFA23RAWDATA.AVONMAET.DIM_CROP_TYPE(CROP_ID);



----- FOR GROWTH_STAGE
CREATE OR REPLACE TABLE DFA23RAWDATA.AVONMAET.DIM_GROWTH_STAGE AS
SELECT 
    CAST('GS' || ROW_NUMBER() OVER(ORDER BY GROWTH_STAGE) AS VARCHAR(10)) AS GROWTH_STAGE_ID,
    GROWTH_STAGE
FROM
    (
SELECT GROWTH_STAGE
FROM DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
GROUP BY GROWTH_STAGE
ORDER BY GROWTH_STAGE
    );

--- TO CHECK IF THE TABLE WAS CREATED
SELECT * FROM DFA23RAWDATA.AVONMAET.DIM_GROWTH_STAGE

--- TO REPLACE THE GROWTH_STAGE COLUMN FROM CROPDATA TABLE AND REPLACE WITH GROWTH_STAGE_ID
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
ADD COLUMN GROWTH_STAGE_ID VARCHAR(10);

UPDATE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW AS T2
SET T2.GROWTH_STAGE_ID = T1.GROWTH_STAGE_ID
FROM DFA23RAWDATA.AVONMAET.DIM_GROWTH_STAGE AS T1
WHERE T2.GROWTH_STAGE = T1.GROWTH_STAGE;

ALTER TABLE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
DROP COLUMN GROWTH_STAGE;

--- TO ASSIGN PRIMARY KEY AND FOREIGN KEY
ALTER TABLE DFA23RAWDATA.AVONMAET.DIM_GROWTH_STAGE
ADD CONSTRAINT PK_GROWTH_STAGE_ID PRIMARY KEY (GROWTH_STAGE_ID);

ALTER TABLE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
ADD CONSTRAINT FK_GROWTH_STAGEID
FOREIGN KEY (GROWTH_STAGE_ID)
REFERENCES DFA23RAWDATA.AVONMAET.DIM_GROWTH_STAGE(GROWTH_STAGE_ID);


----- PEST TYPE (PESTDATA AND CROPDATA)
---- PEST TYPE WAS OBSERVED IN THE CROPDATA TABLE AS PEST_ISSUES AND ALSO 
--- IN THE PESTDATA TABLE. SO MY DIMENSION TABLE WOULD BE THE DISTINCT UNION
---- OF BOTH TABLES
CREATE OR REPLACE TABLE DFA23RAWDATA.AVONMAET.DIM_PEST_TYPE AS
SELECT 
    CAST('P' || ROW_NUMBER() OVER(ORDER BY PEST_TYPE) AS VARCHAR(10)) AS PEST_ID,
    PEST_TYPE
FROM
    (SELECT PEST_TYPE
FROM DFA23RAWDATA.AVONMAET.STG_PESTDATARAW
GROUP BY PEST_TYPE
UNION 
SELECT PEST_ISSUE AS PEST_TYPE
FROM DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
GROUP BY PEST_ISSUE
ORDER BY PEST_TYPE
    );

--- TO CHECK IF THE TABLE WAS CREATED
SELECT * FROM DFA23RAWDATA.AVONMAET.DIM_PEST_TYPE

--- TO REPLACE THE PEST TYPE COLUMN FROM PESTDATA TABLE AND REPLACE WITH PEST_ID
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_PESTDATARAW
ADD COLUMN PEST_ID VARCHAR(10);

ALTER TABLE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
ADD COLUMN PEST_ID VARCHAR(10);

UPDATE DFA23RAWDATA.AVONMAET.STG_PESTDATARAW AS T2
SET T2.PEST_ID = T1.PEST_ID
FROM DFA23RAWDATA.AVONMAET.DIM_PEST_TYPE AS T1
WHERE T2.PEST_TYPE = T1.PEST_TYPE;

UPDATE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW AS T2
SET T2.PEST_ID = T1.PEST_ID
FROM DFA23RAWDATA.AVONMAET.DIM_PEST_TYPE AS T1
WHERE T2.PEST_ISSUE = T1.PEST_TYPE;

ALTER TABLE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
DROP COLUMN PEST_ISSUE;

ALTER TABLE DFA23RAWDATA.AVONMAET.STG_PESTDATARAW
DROP COLUMN PEST_TYPE;


--- TO ASSIGN PRIMARY KEY AND FOREIGN KEY
ALTER TABLE DFA23RAWDATA.AVONMAET.DIM_PEST_TYPE
ADD CONSTRAINT PK_PEST_ID PRIMARY KEY (PEST_ID);

ALTER TABLE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
ADD CONSTRAINT FK_PESTID
FOREIGN KEY (PEST_ID)
REFERENCES DFA23RAWDATA.AVONMAET.DIM_PEST_TYPE(PEST_ID);

ALTER TABLE DFA23RAWDATA.AVONMAET.STG_PESTDATARAW
ADD CONSTRAINT FK_PESTID
FOREIGN KEY (PEST_ID)
REFERENCES DFA23RAWDATA.AVONMAET.DIM_PEST_TYPE(PEST_ID);


----- FOR IRRIGATION METHOD (IRRIGATIONDATA)

CREATE OR REPLACE TABLE DFA23RAWDATA.AVONMAET.DIM_IRRIGATION_METHOD AS
SELECT 
    CAST('IR-' || ROW_NUMBER() OVER(ORDER BY IRRIGATION_METHOD) AS VARCHAR(10)) AS IRRIGATION_METHOD_ID,
    IRRIGATION_METHOD
FROM
    (SELECT IRRIGATION_METHOD
FROM DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
GROUP BY IRRIGATION_METHOD
    );

--- TO CHECK IF THE TABLE WAS CREATED
SELECT * FROM DFA23RAWDATA.AVONMAET.DIM_IRRIGATION_METHOD

--- TO REPLACE THE IRRIGATION_METHOD COLUMN FROM IRRIGATIONDATA TABLE AND REPLACE WITH IRRIGATION_METHOD_ID
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
ADD COLUMN IRRIGATION_METHOD_ID VARCHAR(10);

UPDATE DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW AS T2
SET T2.IRRIGATION_METHOD_ID = T1.IRRIGATION_METHOD_ID
FROM DFA23RAWDATA.AVONMAET.DIM_IRRIGATION_METHOD AS T1
WHERE T2.IRRIGATION_METHOD = T1.IRRIGATION_METHOD;

ALTER TABLE DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
DROP COLUMN IRRIGATION_METHOD;


--- TO ASSIGN PRIMARY KEY AND FOREIGN KEY
ALTER TABLE DFA23RAWDATA.AVONMAET.DIM_IRRIGATION_METHOD
ADD CONSTRAINT PK_IRRIGATION_METHOD_ID PRIMARY KEY (IRRIGATION_METHOD_ID);

ALTER TABLE DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
ADD CONSTRAINT FK_IRRIGATION_METHOD_ID
FOREIGN KEY (IRRIGATION_METHOD_ID)
REFERENCES DFA23RAWDATA.AVONMAET.DIM_IRRIGATION_METHOD(IRRIGATION_METHOD_ID);


--- WATER SOURCE (IRRIGATION DATA)

CREATE OR REPLACE TABLE DFA23RAWDATA.AVONMAET.DIM_WATER_SOURCE AS
SELECT 
    CAST('WS-' || ROW_NUMBER() OVER(ORDER BY WATER_SOURCE) AS VARCHAR(10)) AS WATER_SOURCE_ID,
    WATER_SOURCE
FROM
    (SELECT WATER_SOURCE
FROM DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
WHERE WATER_SOURCE IS NOT NULL
GROUP BY WATER_SOURCE
    );

--- TO CHECK IF THE TABLE WAS CREATED
SELECT * FROM DFA23RAWDATA.AVONMAET.DIM_WATER_SOURCE

--- TO REPLACE THE WATER_SOURCE COLUMN FROM IRRIGATIONDATA TABLE AND REPLACE WITH WATER_SOURCE_ID
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
ADD COLUMN WATER_SOURCE_ID VARCHAR(10);

UPDATE DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW AS T2
SET T2.WATER_SOURCE_ID = T1.WATER_SOURCE_ID
FROM DFA23RAWDATA.AVONMAET.DIM_WATER_SOURCE AS T1
WHERE T2.WATER_SOURCE = T1.WATER_SOURCE;

ALTER TABLE DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
DROP COLUMN WATER_SOURCE;


--- TO ASSIGN PRIMARY KEY AND FOREIGN KEY
ALTER TABLE DFA23RAWDATA.AVONMAET.DIM_WATER_SOURCE
ADD CONSTRAINT PK_WATER_SOURCE_ID PRIMARY KEY (WATER_SOURCE_ID);

ALTER TABLE DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
ADD CONSTRAINT FK_WATER_SOURCE_ID
FOREIGN KEY (IRRIGATION_METHOD_ID)
REFERENCES DFA23RAWDATA.AVONMAET.DIM_WATER_SOURCE(WATER_SOURCE_ID);



---- for TIMESTAMP 
CREATE OR REPLACE TABLE DFA23RAWDATA.AVONMAET.DIM_DATE AS
WITH DateSeries AS (
    SELECT DATEADD(SECOND, ROW_NUMBER() OVER(ORDER BY SEQ4()), '2022-01-01 00:00:00') AS DateTime
    FROM TABLE(GENERATOR(ROWCOUNT => 31536000)) -- Adjust for the number of seconds in your desired range (365 days)
)
SELECT
    CAST(DateTime AS TIMESTAMP_NTZ) AS DateTimeKey,
    TO_VARIANT(DateTime) AS DateTimeValue,
    CAST(YEAR(DateTime) AS INT) AS Year,
    CAST(MONTH(DateTime) AS INT) AS Month,
    CAST(DAY(DateTime) AS INT) AS Day,
    CAST(HOUR(DateTime) AS INT) AS Hour,
    CAST(MINUTE(DateTime) AS INT) AS Minute,
    CAST(SECOND(DateTime) AS INT) AS Second,
    CAST(DAYOFWEEK(DateTime) AS INT) AS DayOfWeek,
    CAST(DAYOFYEAR(DateTime) AS INT) AS DayOfYear,
    CAST(WEEK(DateTime) AS INT) AS WeekOfYear
FROM DateSeries;


--- TO ASSIGN PRIMARY KEY AND FOREIGN KEY
ALTER TABLE DFA23RAWDATA.AVONMAET.DIM_DATE
ADD CONSTRAINT PK_DATETIME PRIMARY KEY (DateTimeKey);

-- FOR FOREIGN KEY

-- FOR CROPDATA
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_CROPDATARAW
ADD CONSTRAINT FK_TIMESTAMP
FOREIGN KEY (TIMESTAMP)
REFERENCES DFA23RAWDATA.AVONMAET.DIM_DATE(DateTimeKey);

-- FOR WEATHERDATA
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_WEATHERDATARAW
ADD CONSTRAINT FK_TIMESTAMP
FOREIGN KEY (TIMESTAMP)
REFERENCES DFA23RAWDATA.AVONMAET.DIM_DATE(DateTimeKey);

-- FOR PESTDATA
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_PESTDATARAW
ADD CONSTRAINT FK_TIMESTAMP
FOREIGN KEY (TIMESTAMP)
REFERENCES DFA23RAWDATA.AVONMAET.DIM_DATE(DateTimeKey);

-- FOR IRRIGATIONDATA
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
ADD CONSTRAINT FK_TIMESTAMP
FOREIGN KEY (TIMESTAMP)
REFERENCES DFA23RAWDATA.AVONMAET.DIM_DATE(DateTimeKey);


-- FOR SOILDATA
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SOILDATARAW
ADD CONSTRAINT FK_TIMESTAMP
FOREIGN KEY (TIMESTAMP)
REFERENCES DFA23RAWDATA.AVONMAET.DIM_DATE(DateTimeKey);


-- FOR SENSORDATA
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
ADD CONSTRAINT FK_TIMESTAMP
FOREIGN KEY (TIMESTAMP)
REFERENCES DFA23RAWDATA.AVONMAET.DIM_DATE(DateTimeKey);



---- WEATHER_CONDITION

CREATE OR REPLACE TABLE DFA23RAWDATA.AVONMAET.DIM_WEATHER_CONDITION AS
SELECT 
    CAST('WC-' || ROW_NUMBER() OVER(ORDER BY WEATHER_CONDITION) AS VARCHAR(10)) AS WEATHER_CONDITION_ID,
    WEATHER_CONDITION
FROM
    (SELECT WEATHER_CONDITION
FROM DFA23RAWDATA.AVONMAET.STG_WEATHERDATARAW
WHERE WEATHER_CONDITION IS NOT NULL
GROUP BY WEATHER_CONDITION
    );

--- TO CHECK IF THE TABLE WAS CREATED
SELECT * FROM DFA23RAWDATA.AVONMAET.DIM_WEATHER_CONDITION

--- TO REPLACE THE IRRIGATION_METHOD COLUMN FROM IRRIGATIONDATA TABLE AND REPLACE WITH IRRIGATION_METHOD_ID
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_WEATHERDATARAW
ADD COLUMN WEATHER_CONDITION_ID VARCHAR(10);

UPDATE DFA23RAWDATA.AVONMAET.STG_WEATHERDATARAW AS T2
SET T2.WEATHER_CONDITION_ID = T1.WEATHER_CONDITION_ID
FROM DFA23RAWDATA.AVONMAET.DIM_WEATHER_CONDITION AS T1
WHERE T2.WEATHER_CONDITION = T1.WEATHER_CONDITION;

ALTER TABLE DFA23RAWDATA.AVONMAET.STG_WEATHERDATARAW
DROP COLUMN WEATHER_CONDITION;


--- TO ASSIGN PRIMARY KEY AND FOREIGN KEY
ALTER TABLE DFA23RAWDATA.AVONMAET.DIM_WEATHER_CONDITION
ADD CONSTRAINT PK_WEATHER_CONDITION_ID PRIMARY KEY (WEATHER_CONDITION_ID);

ALTER TABLE DFA23RAWDATA.AVONMAET.STG_WEATHERDATARAW
ADD CONSTRAINT FK_WEATHER_CONDITION_ID
FOREIGN KEY (WEATHER_CONDITION_ID)
REFERENCES DFA23RAWDATA.AVONMAET.DIM_WEATHER_CONDITION(WEATHER_CONDITION_ID);



---- SENSOR_ID
SELECT SENSOR_ID
FROM DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
WHERE LENGTH(SENSOR_ID) > 4
ORDER BY SENSOR_ID
LIMIT 20;

CREATE OR REPLACE TABLE DFA23RAWDATA.AVONMAET.DIM_SENSOR AS
SELECT 
 SENSOR_ID
FROM DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
GROUP BY SENSOR_ID
    );

--- TO CHECK IF THE TABLE WAS CREATED
SELECT * FROM DFA23RAWDATA.AVONMAET.DIM_SENSOR
LIMIT 30



--- TO ASSIGN PRIMARY KEY AND FOREIGN KEY
ALTER TABLE DFA23RAWDATA.AVONMAET.DIM_SENSOR
ADD CONSTRAINT PK_SENSOR_ID PRIMARY KEY (SENSOR_ID);

--- SENSOR DATA TABLE
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_SENSORDATARAW
ADD CONSTRAINT SENSOR_ID
FOREIGN KEY (SENSOR_ID)
REFERENCES DFA23RAWDATA.AVONMAET.DIM_SENSOR(SENSOR_ID);

--- IRRIGATION DATA TABLE
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_IRRIGATIONDATARAW
ADD CONSTRAINT SENSOR_ID
FOREIGN KEY (SENSOR_ID)
REFERENCES DFA23RAWDATA.AVONMAET.DIM_SENSOR(SENSOR_ID);

--- LOCATION DATA TABLE
ALTER TABLE DFA23RAWDATA.AVONMAET.STG_LOCATIONDATARAW
ADD CONSTRAINT SENSOR_ID
FOREIGN KEY (SENSOR_ID)
REFERENCES DFA23RAWDATA.AVONMAET.DIM_SENSOR(SENSOR_ID);



---- FOR LOCATION
CREATE OR REPLACE TABLE Dim_Location AS
SELECT 
    ROW_NUMBER() OVER (ORDER BY LOCATION_NAME) AS LocationID,
    LOCATION_NAME,
    SENSOR_ID,
    Longitude,
    Latitude,
    Elevation,
    Region
FROM DFA23RAWDATA.AVONMAET.STG_LOCATIONDATARAW;

---- MAKING MY PRIMARY KEY
ALTER TABLE Dim_Location ADD PRIMARY KEY (LocationID);

---- DROPPING STAGING TABLE
DROP TABLE DFA23RAWDATA.AVONMAET.STG_LOCATIONDATARAW;

----- RENAMING FACT TABLES
ALTER TABLE STG_CROPDATARAW RENAME TO FACT_CROP;
ALTER TABLE STG_IRRIGATIONDATARAW RENAME TO FACT_IRRIGATION;
ALTER TABLE STG_PESTDATARAW RENAME TO FACT_PEST;
ALTER TABLE STG_SENSORDATARAW RENAME TO FACT_SENSOR;
ALTER TABLE STG_SOILDATARAW RENAME TO FACT_SOIL;
ALTER TABLE STG_WEATHERDATARAW RENAME TO FACT_WEATHER;




--- TO IMPROVE QUERY PERFORMANCE, ADD CLUSTERING KEY TO CERTAIN COLUMNS

--- PEST_SEVERITY 
ALTER TABLE DFA23RAWDATA.AVONMAET.FACT_PEST
CLUSTER BY (PEST_SEVERITY);

---- LOCATION REGION
ALTER TABLE DFA23RAWDATA.AVONMAET.DIM_LOCATION
CLUSTER BY (REGION);

----- TEMPERATURE
ALTER TABLE DFA23RAWDATA.AVONMAET.FACT_SENSOR
CLUSTER BY (TEMPERATURE);

----- BATTERY_LEVEL
ALTER TABLE DFA23RAWDATA.AVONMAET.FACT_SENSOR
CLUSTER BY (BATTERY_LEVEL);


----- SOIL_PH
ALTER TABLE DFA23RAWDATA.AVONMAET.FACT_SOIL
CLUSTER BY (SOIL_PH);




